"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[9917],{3905:(n,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>b});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function p(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?p(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},p=Object.keys(n);for(r=0;r<p.length;r++)e=p[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(n);for(r=0;r<p.length;r++)e=p[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var c=r.createContext({}),l=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},s=function(n){var t=l(n.components);return r.createElement(c.Provider,{value:t},n.children)},u="mdxType",d={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,p=n.originalType,c=n.parentName,s=o(n,["components","mdxType","originalType","parentName"]),u=l(e),m=i,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||p;return e?r.createElement(b,a(a({ref:t},s),{},{components:e})):r.createElement(b,a({ref:t},s))}));function b(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var p=e.length,a=new Array(p);a[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=n,o[u]="string"==typeof n?n:i,a[1]=o;for(var l=2;l<p;l++)a[l]=e[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},4898:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>p,metadata:()=>o,toc:()=>l});var r=e(7462),i=(e(7294),e(3905));const p={title:"tag_invoke",tags:["work"]},a=void 0,o={unversionedId:"cpp/tag_invoke",id:"cpp/tag_invoke",title:"tag_invoke",description:"http://purecpp.cn/detail?id=2348",source:"@site/docs/cpp/tag_invoke.md",sourceDirName:"cpp",slug:"/cpp/tag_invoke",permalink:"/docs/cpp/tag_invoke",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/cpp/tag_invoke.md",tags:[{label:"work",permalink:"/docs/tags/work"}],version:"current",lastUpdatedAt:1697901933,formattedLastUpdatedAt:"Oct 21, 2023",frontMatter:{title:"tag_invoke",tags:["work"]},sidebar:"tutorialSidebar",previous:{title:"\u5de6\u503c\u548c\u53f3\u503c",permalink:"/docs/cpp/rvalue"},next:{title:"C++\u6a21\u677f",permalink:"/docs/cpp/template_cpp"}},c={},l=[],s={toc:l},u="wrapper";function d(n){let{components:t,...e}=n;return(0,i.kt)(u,(0,r.Z)({},s,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"http://purecpp.cn/detail?id=2348"},"http://purecpp.cn/detail?id=2348"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nnamespace lib1 {\n\ntemplate <class T>\nvoid print(T const& t) {\n    std::cout << "lib1::print()" << std::endl;  \n}\n\n} // namespace lib1\nnamespace lib2 {\n\nstruct w {\n    int x_;\n};\n\nvoid print(w const&) {\n    std::cout << "lib2::print()" << std::endl;\n}\n\n} // namespace lib2\n\nlib2::w x;\nlib1::print(x); // #1 lib1::print -- NOT EXPECTED\nlib2::print(x); // #2 lib2::print\n\nusing namespace lib1;\nprint(x);       // #3 lib2::print -- ADL\n')),(0,i.kt)("p",null,"\u5f53\u6211\u4eec\u5728\u57fa\u7840\u5e93 lib1 \u4e2d\u5b9a\u4e49 print \u65b9\u6cd5\u540e\uff0c\u5e0c\u671b\u7528\u6237\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u81ea\u5b9a\u4e49 print \u7684\u884c\u4e3a\u3002\u5982\u4e0a\u8ff0\u4ee3\u7801\uff0c\u671f\u671b\u4ee5\u9650\u5b9a\u540d lib1::print(x) \u8c03\u7528\u65f6\u53ef\u4ee5\u8c03\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4ee3\u7801\uff0c\u7136\u800c\u5e76\u6ca1\u6709\u8fbe\u5230\u671f\u671b\u3002"),(0,i.kt)("h1",{id:"\u89e3\u51b3\u65b9\u6cd51"},"\u89e3\u51b3\u65b9\u6cd51"),(0,i.kt)("p",null,"\u5f53\u628a\u51fd\u6570\u63d0\u5347\u4e3a\u5bf9\u8c61\u540e\u53ef\u4ee5\u907f\u514d\u53c2\u6570\u4f9d\u8d56\u67e5\u627e\uff0c\u7136\u540e\u5728\u5bf9\u8c61\u5185\u6b63\u786e\u5904\u7406\u9700\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5982\u4e0a\u8ff0\u4ee3\u7801\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nnamespace lib1 {\nnamespace cpo {\n\nstruct print_t {\n    template <class T>\n    friend void print(T const& t) {\n        std::cout << "lib1::print()" << std::endl;  \n    }\n\n    template <class T>\n    constexpr void operator()(T&& t) const {\n        return print(t);\n    }\n};\n\n} // namespace cpo\n\nconstexpr cpo::print_t print;\n\n} // namespace lib1\n\n// ... lib2 code ...\n\nlib2::w x;\nlib1::print(x); // #1 lib2::print -- EXPECTED\nlib2::print(x); // #2 lib2::print\n\nusing namespace lib1;\nprint(x);       // #3 lib2::print -- EXPECTED\n')),(0,i.kt)("h1",{id:"\u89e3\u6cd5\u65b9\u6cd52"},"\u89e3\u6cd5\u65b9\u6cd52"),(0,i.kt)("p",null,"tag_invoke"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <type_traits>\n\nnamespace lib1 {\n\nconstexpr struct tag_invoke_t {\n    template <class CPO, class T>\n    constexpr void operator()(CPO&& cpo, T&& t) const {\n        return tag_invoke(std::forward<CPO>(cpo), std::forward<T>(t));\n    }\n} tag_invoke;\n\nnamespace cpo {\n\nstruct print_t {\n    template <class T>\n    friend void tag_invoke(print_t, T const& t) {\n        std::cout << "lib1::print()" << std::endl;  \n    }\n\n    template <class T>\n    constexpr void operator()(T&& t) const {\n        return lib1::tag_invoke(print_t{}, std::forward<T>(t));\n    }\n};\n\n} // namespace cpo\n\nconstexpr cpo::print_t print;\n\n} // namespace lib1\nnamespace lib2 {\n\n// ... struct w ...\n\nvoid tag_invoke(std::remove_cvref_t<decltype(lib1::print)>, w const&) {\n    std::cout << "lib2::print()" << std::endl;\n}\n\n} // namespace lib2\n\nlib2::w x;\nlib1::print(x); // #1 lib2::print -- EXPECTED\n\nusing namespace lib1;\nprint(x);       // #2 lib2::print -- EXPECTED\n')))}d.isMDXComponent=!0}}]);