"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[499],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>d});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),u=p(n),f=o,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||i;return n?r.createElement(d,a(a({ref:e},s),{},{components:n})):r.createElement(d,a({ref:e},s))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[u]="string"==typeof t?t:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},303:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={title:"onnx \u81ea\u5b9a\u4e49op\u5e76\u5bfc\u51fa",tags:["work","interview"]},a=void 0,l={unversionedId:"ml/optimization/custom_onnx_op",id:"ml/optimization/custom_onnx_op",title:"onnx \u81ea\u5b9a\u4e49op\u5e76\u5bfc\u51fa",description:"https://blog.csdn.net/u011622208/article/details/122255317",source:"@site/docs/ml/optimization/custom_onnx_op.md",sourceDirName:"ml/optimization",slug:"/ml/optimization/custom_onnx_op",permalink:"/docs/ml/optimization/custom_onnx_op",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/ml/optimization/custom_onnx_op.md",tags:[{label:"work",permalink:"/docs/tags/work"},{label:"interview",permalink:"/docs/tags/interview"}],version:"current",lastUpdatedAt:1698075805,formattedLastUpdatedAt:"Oct 23, 2023",frontMatter:{title:"onnx \u81ea\u5b9a\u4e49op\u5e76\u5bfc\u51fa",tags:["work","interview"]},sidebar:"tutorialSidebar",previous:{title:"AudioLDM 2\uff0c\u52a0\u901f",permalink:"/docs/ml/optimization/SD\u6a21\u578b\u4f18\u5316"},next:{title:"\u518d\u6b21\u7406\u89e3 im2col",permalink:"/docs/ml/optimization/im2col"}},c={},p=[],s={toc:p},u="wrapper";function m(t){let{components:e,...i}=t;return(0,o.kt)(u,(0,r.Z)({},s,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://blog.csdn.net/u011622208/article/details/122255317"},"https://blog.csdn.net/u011622208/article/details/122255317"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import torch\nimport torch.nn as nn\nfrom torch.autograd import Function\nimport onnx\nimport torch.onnx\n\nclass Requant_(Function):\n    @staticmethod\n    def forward(ctx, input, requant_scale, shift):               # ctx \u5fc5\u987b\u8981\n        input = input.double() * requant_scale / 2**shift        # \u4e3a\u4e86\u7b49\u4ef7\u4e8ec\u4e2d\u7684\u79fb\u4f4d\u64cd\u4f5c\u3002\u4f1a\u5b58\u5728int32\u6ea2\u51fa\n        input = torch.floor(input).float()\n\n        return torch.floor(input)\n    \n    @staticmethod\n    def symbolic(g, *inputs):\n        return g.op(\"Requant\", inputs[0], scale_f=23.0, shift_i=8)\n\nrequant_ = Requant_.apply\n\nclass TinyNet(nn.Module):\n    def __init__(self):\n        super(TinyNet, self).__init__()\n        self.conv1 = nn.Conv2d(3, 1, kernel_size=3, padding=1)\n        self.relu1 = nn.ReLU()\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.relu1(x)\n        x = x.view(-1)\n        x = requant_(x, 5, 5)\n        return x\n\nnet = TinyNet().cuda()\nipt = torch.ones(2,3,12,12).cuda()\ntorch.onnx.export(net, (ipt,), 'tinynet.onnx', opset_version=11, enable_onnx_checker=False)\nprint(onnx.load('tinynet.onnx'))\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7ee7\u627f\u81eatorch.autograd"),(0,o.kt)("li",{parentName:"ul"},"scale_f=23.0, shift_i=8\uff0c_f\u8868\u793a\u6d6e\u70b9\u6570\uff0c_i\u8868\u793a\u6574\u5f62int32\u7c7b\u578b")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Alt text",src:n(901).Z,width:"843",height:"544"})))}m.isMDXComponent=!0},901:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/image-2-4e1b6f2eea3218fea142c0ef605f426c.png"}}]);