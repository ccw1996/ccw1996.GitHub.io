"use strict";(self.webpackChunkblog_sample=self.webpackChunkblog_sample||[]).push([[657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,b=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"CRTP",tags:["work"],editor:"caroot"},i="**\u9759\u6001\u591a\u6001\uff08Static polymorphism\uff09\u3002**",c={unversionedId:"cpp/CRTP",id:"cpp/CRTP",title:"CRTP",description:"\u4ee5 Base: Base \u4e2d\uff0c Base \u662f\u5148\u4e8e Derived \u800c\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u5f53 Base::implementation() \u7684\u58f0\u660e\u4e86\u3002",source:"@site/docs/cpp/CRTP.md",sourceDirName:"cpp",slug:"/cpp/CRTP",permalink:"/docs/cpp/CRTP",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/cpp/CRTP.md",tags:[{label:"work",permalink:"/docs/tags/work"}],version:"current",lastUpdatedAt:1697902806,formattedLastUpdatedAt:"Oct 21, 2023",frontMatter:{title:"CRTP",tags:["work"],editor:"caroot"},sidebar:"tutorialSidebar",previous:{title:"\u603b\u7ed3 C/C++ \u77e5\u8bc6",permalink:"/docs/cpp/summarycpp"},next:{title:"STL",permalink:"/docs/cpp/STL/"}},s={},p=[],l={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u9759\u6001\u591a\u6001static-polymorphism"},(0,a.kt)("strong",{parentName:"h1"},"\u9759\u6001\u591a\u6001\uff08Static polymorphism\uff09\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"``` cpp\n          template <class T> \n          struct Base\n          {\n              void interface()\n              {\n                  // ...\n                  static_cast<T*>(this)->implementation();\n                  // ...\n              }\n          \n              static void static_func()\n              {\n                  // ...\n                  T::static_sub_func();\n                  // ...\n              }\n          };\n          \n          struct Derived : Base<Derived>\n          {\n              void implementation()\uff1b\n          \n              static void static_sub_func();\n          };\n```\n\u4ee5 `Base<Derived>::interface()` \xa0\u4e3a\u4f8b\uff0c\u5728 `Derived : Base<Derived>` \u4e2d\uff0c `Base<Derived>` \u662f\u5148\u4e8e `Derived` \u800c\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u5f53 `Base<Derived>::interface()` \u88ab\u7533\u660e\u65f6\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053 `Derived` \u7684\u5b58\u5728\u7684\uff0c\u4f46\u7531\u4e8e\u6b64\u65f6\xa0Base<Derived>::interface()\xa0\u5e76\u4e0d\u4f1a\u88ab\u5b9e\u4f8b\u5316\u3002\u53ea\u6709\u5f53 `Base<Derived>::interface()` \u88ab\u8c03\u7528\u65f6\uff0c\u624d\u4f1a\u88ab\u5b9e\u4f8b\u5316\uff0c\u800c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e5f\u5df2\u7ecf\u77e5\u9053\u4e86\xa0 `Derived::implementation()` \u7684\u58f0\u660e\u4e86\u3002\n")),(0,a.kt)("h1",{id:"\u8f7b\u677e\u5730\u5b9e\u73b0\u5404\u4e2a\u5b50\u7c7b\u5b9e\u4f8b\u521b\u5efa\u548c\u6790\u6784\u72ec\u7acb\u7684\u8ba1\u6570"},(0,a.kt)("strong",{parentName:"h1"},"\u8f7b\u677e\u5730\u5b9e\u73b0\u5404\u4e2a\u5b50\u7c7b\u5b9e\u4f8b\u521b\u5efa\u548c\u6790\u6784\u72ec\u7acb\u7684\u8ba1\u6570")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"``` cpp\n          template <typename T>\n          struct counter\n          {\n              static int objects_created;\n              static int objects_alive;\n          \n              counter()\n              {\n                  ++objects_created;\n                  ++objects_alive;\n              }\n              \n              counter(const counter&)\n              {\n                  ++objects_created;\n                  ++objects_alive;\n              }\n          protected:\n              ~counter() // objects should never be removed through pointers of this type\n              {\n                  --objects_alive;\n              }\n          };\n          template <typename T> int counter<T>::objects_created( 0 );\n          template <typename T> int counter<T>::objects_alive( 0 );\n          \n          class X : counter<X>\n          {\n              // ...\n          };\n          \n          class Y : counter<Y>\n          {\n              // ...\n          };\n```\n")),(0,a.kt)("h1",{id:"3-\u591a\u6001\u94fepolymorphic-chaining"},(0,a.kt)("strong",{parentName:"h1"},"3. \u591a\u6001\u94fe\uff08Polymorphic chaining\uff09")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'``` cpp\n          class Printer\n          {\n          public:\n              Printer(ostream& pstream) : m_stream(pstream) {}\n           \n              template <typename T>\n              Printer& print(T&& t) { m_stream << t; return *this; }\n           \n              template <typename T>\n              Printer& println(T&& t) { m_stream << t << endl; return *this; }\n          private:\n              ostream& m_stream;\n          };\n          \n          class CoutPrinter : public Printer\n          {\n          public:\n              CoutPrinter() : Printer(cout) {}\n          \n              CoutPrinter& SetConsoleColor(Color c)\n              {\n                  // ...\n                  return *this;\n              }\n          };\n```\n\u4e0a\u9762Printer\u5b9a\u4e49\u6253\u5370\u7684\u65b9\u6cd5\uff0c `CoutPrinter` \u662f `Printer` \u7684\u5b50\u7c7b\uff0c\u5e76\u4e14\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8bbe\u7f6e\u6253\u5370\u989c\u8272\u7684\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a\n``` cpp\n          CoutPrinter().print("Hello ").SetConsoleColor(Color.red).println("Printer!");\n```\n\u524d\u534a\u6bb5 `CoutPrinter().print("Hello ")` \u8c03\u7528\u7684\u662f `Printer` \u5b9e\u4f8b\uff0c\u540e\u9762\u63a5\u7740 `SetConsoleColor(Color.red)` \u5b9e\u9645\u4e0a\u53c8\u9700\u8981\u8c03\u7528 `CoutPrinter` \u5b9e\u4f8b\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u4f1a\u62a5\u9519\u3002\n``` cpp\n          // Base class\n          template <typename ConcretePrinter>\n          class Printer\n          {\n          public:\n              Printer(ostream& pstream) : m_stream(pstream) {}\n           \n              template <typename T>\n              ConcretePrinter& print(T&& t)\n              {\n                  m_stream << t;\n                  return static_cast<ConcretePrinter&>(*this);\n              }\n           \n              template <typename T>\n              ConcretePrinter& println(T&& t)\n              {\n                  m_stream << t << endl;\n                  return static_cast<ConcretePrinter&>(*this);\n              }\n          private:\n              ostream& m_stream;\n          };\n           \n          // Derived class\n          class CoutPrinter : public Printer<CoutPrinter>\n          {\n          public:\n              CoutPrinter() : Printer(cout) {}\n           \n              CoutPrinter& SetConsoleColor(Color c)\n              {\n                  // ...\n                  return *this;\n              }\n          };\n           \n          // usage\n          CoutPrinter().print("Hello ").SetConsoleColor(Color.red).println("Printer!");\n```\n')),(0,a.kt)("h1",{id:"4-\u591a\u6001\u7684\u590d\u5236\u6784\u9020\u4f53polymorphic-copy-construction"},(0,a.kt)("strong",{parentName:"h1"},"4. \u591a\u6001\u7684\u590d\u5236\u6784\u9020\u4f53\uff08Polymorphic copy construction\uff09\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u5f53\u6211\u4eec\u7528\u5230\u591a\u6001\u65f6\uff0c\u7ecf\u5e38\u4f1a\u9700\u8981\u901a\u8fc7\u57fa\u7c7b\u7684\u6307\u9488\u6765\u590d\u5236\u5b50\u5bf9\u8c61\u3002\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u57fa\u7c7b\u91cc\u9762\u6784\u9020\u4e00\u4e2a `clone()` \u865a\u51fd\u6570\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u5b50\u7c7b\u91cc\u9762\u5b9a\u4e49\u8fd9\u4e2a `clone()` \u51fd\u6570\u3002\u4f7f\u7528CRTP\u53ef\u4ee5\u8ba9\u6211\u4eec\u907f\u514d\u53cd\u590d\u5730\u5728\u5b50\u7c7b\u4e2d\u53bb\u5b9a\u4e49 `clone()` \u51fd\u6570\u3002\n``` cpp\n          // Base class has a pure virtual function for cloning\n          class AbstractShape {\n          public:\n            virtual ~AbstractShape () = default;\n            virtual std::unique_ptr<AbstractShape> clone() const = 0;\n          };\n          - // This CRTP class implements clone() for Derived\n          template <typename Derived>\n          class Shape : public AbstractShape {\n          public:\n            std::unique_ptr<AbstractShape> clone() const override {\n                return std::make_unique<Derived>(static_cast<Derived const&>(*this));\n            }\n          - protected:\n           // We make clear Shape class needs to be inherited\n           Shape() = default;\n           Shape(const Shape&) = default;\n          };\n          - // Every derived class inherits from CRTP class instead of abstract class\n          - class Square : public Shape<Square>{};\n          - class Circle : public Shape<Circle>{};\n```\n")))}m.isMDXComponent=!0}}]);